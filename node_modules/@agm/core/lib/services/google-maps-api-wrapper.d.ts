/// <reference types="googlemaps" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { MapsAPILoader } from './maps-api-loader/maps-api-loader';
/**
 * Wrapper class that handles the communication with the Google Maps Javascript
 * API v3
 */
import * as ɵngcc0 from '@angular/core';
export declare class GoogleMapsAPIWrapper {
    private _loader;
    private _zone;
    private _map;
    private _mapResolver;
    constructor(_loader: MapsAPILoader, _zone: NgZone);
    createMap(el: HTMLElement, mapOptions: google.maps.MapOptions): Promise<void>;
    setMapOptions(options: google.maps.MapOptions): void;
    /**
     * Creates a google map marker with the map context
     */
    createMarker(options?: google.maps.MarkerOptions, addToMap?: boolean): Promise<google.maps.Marker>;
    createInfoWindow(options?: google.maps.InfoWindowOptions): Promise<google.maps.InfoWindow>;
    /**
     * Creates a google.map.Circle for the current map.
     */
    createCircle(options: google.maps.CircleOptions): Promise<google.maps.Circle>;
    /**
     * Creates a google.map.Rectangle for the current map.
     */
    createRectangle(options: google.maps.RectangleOptions): Promise<google.maps.Rectangle>;
    createPolyline(options: google.maps.PolylineOptions): Promise<google.maps.Polyline>;
    createPolygon(options: google.maps.PolygonOptions): Promise<google.maps.Polygon>;
    /**
     * Creates a new google.map.Data layer for the current map
     */
    createDataLayer(options?: google.maps.Data.DataOptions): Promise<google.maps.Data>;
    /**
     * Creates a TransitLayer instance for a map
     * @returns a new transit layer object
     */
    createTransitLayer(): Promise<google.maps.TransitLayer>;
    /**
     * Creates a BicyclingLayer instance for a map
     * @returns a new bicycling layer object
     */
    createBicyclingLayer(): Promise<google.maps.BicyclingLayer>;
    /**
     * Determines if given coordinates are insite a Polygon path.
     */
    containsLocation(latLng: google.maps.LatLng, polygon: google.maps.Polygon): Promise<boolean>;
    subscribeToMapEvent<N extends keyof google.maps.MapHandlerMap>(eventName: N): Observable<google.maps.MapHandlerMap[N]>;
    clearInstanceListeners(): void;
    setCenter(latLng: google.maps.LatLngLiteral): Promise<void>;
    getZoom(): Promise<number>;
    getBounds(): Promise<google.maps.LatLngBounds>;
    getMapTypeId(): Promise<google.maps.MapTypeId>;
    setZoom(zoom: number): Promise<void>;
    getCenter(): Promise<google.maps.LatLng>;
    panTo(latLng: google.maps.LatLng | google.maps.LatLngLiteral): Promise<void>;
    panBy(x: number, y: number): Promise<void>;
    fitBounds(latLng: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): Promise<void>;
    panToBounds(latLng: google.maps.LatLngBounds | google.maps.LatLngBoundsLiteral, padding?: number | google.maps.Padding): Promise<void>;
    /**
     * Returns the native Google Maps Map instance. Be careful when using this instance directly.
     */
    getNativeMap(): Promise<google.maps.Map>;
    /**
     * Triggers the given event name on the map instance.
     */
    triggerMapEvent(eventName: string): Promise<void>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GoogleMapsAPIWrapper, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GoogleMapsAPIWrapper>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ29vZ2xlLW1hcHMtYXBpLXdyYXBwZXIuZC50cyIsInNvdXJjZXMiOlsiZ29vZ2xlLW1hcHMtYXBpLXdyYXBwZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiZ29vZ2xlbWFwc1wiIC8+XG5pbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1hcHNBUElMb2FkZXIgfSBmcm9tICcuL21hcHMtYXBpLWxvYWRlci9tYXBzLWFwaS1sb2FkZXInO1xuLyoqXG4gKiBXcmFwcGVyIGNsYXNzIHRoYXQgaGFuZGxlcyB0aGUgY29tbXVuaWNhdGlvbiB3aXRoIHRoZSBHb29nbGUgTWFwcyBKYXZhc2NyaXB0XG4gKiBBUEkgdjNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgR29vZ2xlTWFwc0FQSVdyYXBwZXIge1xuICAgIHByaXZhdGUgX2xvYWRlcjtcbiAgICBwcml2YXRlIF96b25lO1xuICAgIHByaXZhdGUgX21hcDtcbiAgICBwcml2YXRlIF9tYXBSZXNvbHZlcjtcbiAgICBjb25zdHJ1Y3RvcihfbG9hZGVyOiBNYXBzQVBJTG9hZGVyLCBfem9uZTogTmdab25lKTtcbiAgICBjcmVhdGVNYXAoZWw6IEhUTUxFbGVtZW50LCBtYXBPcHRpb25zOiBnb29nbGUubWFwcy5NYXBPcHRpb25zKTogUHJvbWlzZTx2b2lkPjtcbiAgICBzZXRNYXBPcHRpb25zKG9wdGlvbnM6IGdvb2dsZS5tYXBzLk1hcE9wdGlvbnMpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBnb29nbGUgbWFwIG1hcmtlciB3aXRoIHRoZSBtYXAgY29udGV4dFxuICAgICAqL1xuICAgIGNyZWF0ZU1hcmtlcihvcHRpb25zPzogZ29vZ2xlLm1hcHMuTWFya2VyT3B0aW9ucywgYWRkVG9NYXA/OiBib29sZWFuKTogUHJvbWlzZTxnb29nbGUubWFwcy5NYXJrZXI+O1xuICAgIGNyZWF0ZUluZm9XaW5kb3cob3B0aW9ucz86IGdvb2dsZS5tYXBzLkluZm9XaW5kb3dPcHRpb25zKTogUHJvbWlzZTxnb29nbGUubWFwcy5JbmZvV2luZG93PjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZ29vZ2xlLm1hcC5DaXJjbGUgZm9yIHRoZSBjdXJyZW50IG1hcC5cbiAgICAgKi9cbiAgICBjcmVhdGVDaXJjbGUob3B0aW9uczogZ29vZ2xlLm1hcHMuQ2lyY2xlT3B0aW9ucyk6IFByb21pc2U8Z29vZ2xlLm1hcHMuQ2lyY2xlPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgZ29vZ2xlLm1hcC5SZWN0YW5nbGUgZm9yIHRoZSBjdXJyZW50IG1hcC5cbiAgICAgKi9cbiAgICBjcmVhdGVSZWN0YW5nbGUob3B0aW9uczogZ29vZ2xlLm1hcHMuUmVjdGFuZ2xlT3B0aW9ucyk6IFByb21pc2U8Z29vZ2xlLm1hcHMuUmVjdGFuZ2xlPjtcbiAgICBjcmVhdGVQb2x5bGluZShvcHRpb25zOiBnb29nbGUubWFwcy5Qb2x5bGluZU9wdGlvbnMpOiBQcm9taXNlPGdvb2dsZS5tYXBzLlBvbHlsaW5lPjtcbiAgICBjcmVhdGVQb2x5Z29uKG9wdGlvbnM6IGdvb2dsZS5tYXBzLlBvbHlnb25PcHRpb25zKTogUHJvbWlzZTxnb29nbGUubWFwcy5Qb2x5Z29uPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGdvb2dsZS5tYXAuRGF0YSBsYXllciBmb3IgdGhlIGN1cnJlbnQgbWFwXG4gICAgICovXG4gICAgY3JlYXRlRGF0YUxheWVyKG9wdGlvbnM/OiBnb29nbGUubWFwcy5EYXRhLkRhdGFPcHRpb25zKTogUHJvbWlzZTxnb29nbGUubWFwcy5EYXRhPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgVHJhbnNpdExheWVyIGluc3RhbmNlIGZvciBhIG1hcFxuICAgICAqIEByZXR1cm5zIGEgbmV3IHRyYW5zaXQgbGF5ZXIgb2JqZWN0XG4gICAgICovXG4gICAgY3JlYXRlVHJhbnNpdExheWVyKCk6IFByb21pc2U8Z29vZ2xlLm1hcHMuVHJhbnNpdExheWVyPjtcbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgQmljeWNsaW5nTGF5ZXIgaW5zdGFuY2UgZm9yIGEgbWFwXG4gICAgICogQHJldHVybnMgYSBuZXcgYmljeWNsaW5nIGxheWVyIG9iamVjdFxuICAgICAqL1xuICAgIGNyZWF0ZUJpY3ljbGluZ0xheWVyKCk6IFByb21pc2U8Z29vZ2xlLm1hcHMuQmljeWNsaW5nTGF5ZXI+O1xuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgaWYgZ2l2ZW4gY29vcmRpbmF0ZXMgYXJlIGluc2l0ZSBhIFBvbHlnb24gcGF0aC5cbiAgICAgKi9cbiAgICBjb250YWluc0xvY2F0aW9uKGxhdExuZzogZ29vZ2xlLm1hcHMuTGF0TG5nLCBwb2x5Z29uOiBnb29nbGUubWFwcy5Qb2x5Z29uKTogUHJvbWlzZTxib29sZWFuPjtcbiAgICBzdWJzY3JpYmVUb01hcEV2ZW50PE4gZXh0ZW5kcyBrZXlvZiBnb29nbGUubWFwcy5NYXBIYW5kbGVyTWFwPihldmVudE5hbWU6IE4pOiBPYnNlcnZhYmxlPGdvb2dsZS5tYXBzLk1hcEhhbmRsZXJNYXBbTl0+O1xuICAgIGNsZWFySW5zdGFuY2VMaXN0ZW5lcnMoKTogdm9pZDtcbiAgICBzZXRDZW50ZXIobGF0TG5nOiBnb29nbGUubWFwcy5MYXRMbmdMaXRlcmFsKTogUHJvbWlzZTx2b2lkPjtcbiAgICBnZXRab29tKCk6IFByb21pc2U8bnVtYmVyPjtcbiAgICBnZXRCb3VuZHMoKTogUHJvbWlzZTxnb29nbGUubWFwcy5MYXRMbmdCb3VuZHM+O1xuICAgIGdldE1hcFR5cGVJZCgpOiBQcm9taXNlPGdvb2dsZS5tYXBzLk1hcFR5cGVJZD47XG4gICAgc2V0Wm9vbSh6b29tOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuICAgIGdldENlbnRlcigpOiBQcm9taXNlPGdvb2dsZS5tYXBzLkxhdExuZz47XG4gICAgcGFuVG8obGF0TG5nOiBnb29nbGUubWFwcy5MYXRMbmcgfCBnb29nbGUubWFwcy5MYXRMbmdMaXRlcmFsKTogUHJvbWlzZTx2b2lkPjtcbiAgICBwYW5CeSh4OiBudW1iZXIsIHk6IG51bWJlcik6IFByb21pc2U8dm9pZD47XG4gICAgZml0Qm91bmRzKGxhdExuZzogZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzIHwgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzTGl0ZXJhbCwgcGFkZGluZz86IG51bWJlciB8IGdvb2dsZS5tYXBzLlBhZGRpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHBhblRvQm91bmRzKGxhdExuZzogZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzIHwgZ29vZ2xlLm1hcHMuTGF0TG5nQm91bmRzTGl0ZXJhbCwgcGFkZGluZz86IG51bWJlciB8IGdvb2dsZS5tYXBzLlBhZGRpbmcpOiBQcm9taXNlPHZvaWQ+O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIG5hdGl2ZSBHb29nbGUgTWFwcyBNYXAgaW5zdGFuY2UuIEJlIGNhcmVmdWwgd2hlbiB1c2luZyB0aGlzIGluc3RhbmNlIGRpcmVjdGx5LlxuICAgICAqL1xuICAgIGdldE5hdGl2ZU1hcCgpOiBQcm9taXNlPGdvb2dsZS5tYXBzLk1hcD47XG4gICAgLyoqXG4gICAgICogVHJpZ2dlcnMgdGhlIGdpdmVuIGV2ZW50IG5hbWUgb24gdGhlIG1hcCBpbnN0YW5jZS5cbiAgICAgKi9cbiAgICB0cmlnZ2VyTWFwRXZlbnQoZXZlbnROYW1lOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+O1xufVxuIl19