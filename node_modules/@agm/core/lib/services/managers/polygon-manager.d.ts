/// <reference types="googlemaps" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { AgmPolygon } from '../../directives/polygon';
import { MVCEvent } from '../../utils/mvcarray-utils';
import { GoogleMapsAPIWrapper } from '../google-maps-api-wrapper';
import * as ɵngcc0 from '@angular/core';
export declare class PolygonManager {
    private _mapsWrapper;
    private _zone;
    private _polygons;
    constructor(_mapsWrapper: GoogleMapsAPIWrapper, _zone: NgZone);
    addPolygon(path: AgmPolygon): void;
    updatePolygon(polygon: AgmPolygon): Promise<void>;
    setPolygonOptions(path: AgmPolygon, options: {
        [propName: string]: any;
    }): Promise<void>;
    deletePolygon(paths: AgmPolygon): Promise<void>;
    getPath(polygonDirective: AgmPolygon): Promise<google.maps.LatLng[]>;
    getPaths(polygonDirective: AgmPolygon): Promise<google.maps.LatLng[][]>;
    createEventObservable<T>(eventName: string, path: AgmPolygon): Observable<T>;
    createPathEventObservable(agmPolygon: AgmPolygon): Promise<Observable<MVCEvent<google.maps.LatLng[] | google.maps.LatLngLiteral[]>>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PolygonManager, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PolygonManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9seWdvbi1tYW5hZ2VyLmQudHMiLCJzb3VyY2VzIjpbInBvbHlnb24tbWFuYWdlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJnb29nbGVtYXBzXCIgLz5cbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWdtUG9seWdvbiB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvcG9seWdvbic7XG5pbXBvcnQgeyBNVkNFdmVudCB9IGZyb20gJy4uLy4uL3V0aWxzL212Y2FycmF5LXV0aWxzJztcbmltcG9ydCB7IEdvb2dsZU1hcHNBUElXcmFwcGVyIH0gZnJvbSAnLi4vZ29vZ2xlLW1hcHMtYXBpLXdyYXBwZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgUG9seWdvbk1hbmFnZXIge1xuICAgIHByaXZhdGUgX21hcHNXcmFwcGVyO1xuICAgIHByaXZhdGUgX3pvbmU7XG4gICAgcHJpdmF0ZSBfcG9seWdvbnM7XG4gICAgY29uc3RydWN0b3IoX21hcHNXcmFwcGVyOiBHb29nbGVNYXBzQVBJV3JhcHBlciwgX3pvbmU6IE5nWm9uZSk7XG4gICAgYWRkUG9seWdvbihwYXRoOiBBZ21Qb2x5Z29uKTogdm9pZDtcbiAgICB1cGRhdGVQb2x5Z29uKHBvbHlnb246IEFnbVBvbHlnb24pOiBQcm9taXNlPHZvaWQ+O1xuICAgIHNldFBvbHlnb25PcHRpb25zKHBhdGg6IEFnbVBvbHlnb24sIG9wdGlvbnM6IHtcbiAgICAgICAgW3Byb3BOYW1lOiBzdHJpbmddOiBhbnk7XG4gICAgfSk6IFByb21pc2U8dm9pZD47XG4gICAgZGVsZXRlUG9seWdvbihwYXRoczogQWdtUG9seWdvbik6IFByb21pc2U8dm9pZD47XG4gICAgZ2V0UGF0aChwb2x5Z29uRGlyZWN0aXZlOiBBZ21Qb2x5Z29uKTogUHJvbWlzZTxnb29nbGUubWFwcy5MYXRMbmdbXT47XG4gICAgZ2V0UGF0aHMocG9seWdvbkRpcmVjdGl2ZTogQWdtUG9seWdvbik6IFByb21pc2U8Z29vZ2xlLm1hcHMuTGF0TG5nW11bXT47XG4gICAgY3JlYXRlRXZlbnRPYnNlcnZhYmxlPFQ+KGV2ZW50TmFtZTogc3RyaW5nLCBwYXRoOiBBZ21Qb2x5Z29uKTogT2JzZXJ2YWJsZTxUPjtcbiAgICBjcmVhdGVQYXRoRXZlbnRPYnNlcnZhYmxlKGFnbVBvbHlnb246IEFnbVBvbHlnb24pOiBQcm9taXNlPE9ic2VydmFibGU8TVZDRXZlbnQ8Z29vZ2xlLm1hcHMuTGF0TG5nW10gfCBnb29nbGUubWFwcy5MYXRMbmdMaXRlcmFsW10+Pj47XG59XG4iXX0=