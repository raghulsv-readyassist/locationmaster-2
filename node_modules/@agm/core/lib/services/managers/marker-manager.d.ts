/// <reference types="googlemaps" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { AgmMarker } from './../../directives/marker';
import { GoogleMapsAPIWrapper } from './../google-maps-api-wrapper';
import * as ɵngcc0 from '@angular/core';
export declare class MarkerManager {
    protected _mapsWrapper: GoogleMapsAPIWrapper;
    protected _zone: NgZone;
    protected _markers: Map<AgmMarker, Promise<google.maps.Marker>>;
    constructor(_mapsWrapper: GoogleMapsAPIWrapper, _zone: NgZone);
    convertAnimation(uiAnim: keyof typeof google.maps.Animation | null): Promise<google.maps.Animation>;
    deleteMarker(markerDirective: AgmMarker): Promise<void>;
    updateMarkerPosition(marker: AgmMarker): Promise<void>;
    updateTitle(marker: AgmMarker): Promise<void>;
    updateLabel(marker: AgmMarker): Promise<void>;
    updateDraggable(marker: AgmMarker): Promise<void>;
    updateIcon(marker: AgmMarker): Promise<void>;
    updateOpacity(marker: AgmMarker): Promise<void>;
    updateVisible(marker: AgmMarker): Promise<void>;
    updateZIndex(marker: AgmMarker): Promise<void>;
    updateClickable(marker: AgmMarker): Promise<void>;
    updateAnimation(marker: AgmMarker): Promise<void>;
    addMarker(marker: AgmMarker): void;
    getNativeMarker(marker: AgmMarker): Promise<google.maps.Marker>;
    createEventObservable<T extends (google.maps.MouseEvent | void)>(eventName: google.maps.MarkerMouseEventNames | google.maps.MarkerChangeOptionEventNames, marker: AgmMarker): Observable<T>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<MarkerManager, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<MarkerManager>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyLW1hbmFnZXIuZC50cyIsInNvdXJjZXMiOlsibWFya2VyLW1hbmFnZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJnb29nbGVtYXBzXCIgLz5cbmltcG9ydCB7IE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQWdtTWFya2VyIH0gZnJvbSAnLi8uLi8uLi9kaXJlY3RpdmVzL21hcmtlcic7XG5pbXBvcnQgeyBHb29nbGVNYXBzQVBJV3JhcHBlciB9IGZyb20gJy4vLi4vZ29vZ2xlLW1hcHMtYXBpLXdyYXBwZXInO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWFya2VyTWFuYWdlciB7XG4gICAgcHJvdGVjdGVkIF9tYXBzV3JhcHBlcjogR29vZ2xlTWFwc0FQSVdyYXBwZXI7XG4gICAgcHJvdGVjdGVkIF96b25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIF9tYXJrZXJzOiBNYXA8QWdtTWFya2VyLCBQcm9taXNlPGdvb2dsZS5tYXBzLk1hcmtlcj4+O1xuICAgIGNvbnN0cnVjdG9yKF9tYXBzV3JhcHBlcjogR29vZ2xlTWFwc0FQSVdyYXBwZXIsIF96b25lOiBOZ1pvbmUpO1xuICAgIGNvbnZlcnRBbmltYXRpb24odWlBbmltOiBrZXlvZiB0eXBlb2YgZ29vZ2xlLm1hcHMuQW5pbWF0aW9uIHwgbnVsbCk6IFByb21pc2U8Z29vZ2xlLm1hcHMuQW5pbWF0aW9uPjtcbiAgICBkZWxldGVNYXJrZXIobWFya2VyRGlyZWN0aXZlOiBBZ21NYXJrZXIpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHVwZGF0ZU1hcmtlclBvc2l0aW9uKG1hcmtlcjogQWdtTWFya2VyKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVUaXRsZShtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlTGFiZWwobWFya2VyOiBBZ21NYXJrZXIpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHVwZGF0ZURyYWdnYWJsZShtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlSWNvbihtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlT3BhY2l0eShtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlVmlzaWJsZShtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgdXBkYXRlWkluZGV4KG1hcmtlcjogQWdtTWFya2VyKTogUHJvbWlzZTx2b2lkPjtcbiAgICB1cGRhdGVDbGlja2FibGUobWFya2VyOiBBZ21NYXJrZXIpOiBQcm9taXNlPHZvaWQ+O1xuICAgIHVwZGF0ZUFuaW1hdGlvbihtYXJrZXI6IEFnbU1hcmtlcik6IFByb21pc2U8dm9pZD47XG4gICAgYWRkTWFya2VyKG1hcmtlcjogQWdtTWFya2VyKTogdm9pZDtcbiAgICBnZXROYXRpdmVNYXJrZXIobWFya2VyOiBBZ21NYXJrZXIpOiBQcm9taXNlPGdvb2dsZS5tYXBzLk1hcmtlcj47XG4gICAgY3JlYXRlRXZlbnRPYnNlcnZhYmxlPFQgZXh0ZW5kcyAoZ29vZ2xlLm1hcHMuTW91c2VFdmVudCB8IHZvaWQpPihldmVudE5hbWU6IGdvb2dsZS5tYXBzLk1hcmtlck1vdXNlRXZlbnROYW1lcyB8IGdvb2dsZS5tYXBzLk1hcmtlckNoYW5nZU9wdGlvbkV2ZW50TmFtZXMsIG1hcmtlcjogQWdtTWFya2VyKTogT2JzZXJ2YWJsZTxUPjtcbn1cbiJdfQ==