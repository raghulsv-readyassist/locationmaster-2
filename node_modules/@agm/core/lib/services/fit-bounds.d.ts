/// <reference types="googlemaps" />
import { BehaviorSubject, Observable } from 'rxjs';
import { MapsAPILoader } from './maps-api-loader/maps-api-loader';
import * as ɵngcc0 from '@angular/core';
export interface FitBoundsDetails {
    latLng: google.maps.LatLng | google.maps.LatLngLiteral;
}
/**
 * @internal
 */
export declare type BoundsMap = Map<string, google.maps.LatLng | google.maps.LatLngLiteral>;
/**
 * Class to implement when you what to be able to make it work with the auto fit bounds feature
 * of AGM.
 */
export declare abstract class FitBoundsAccessor {
    abstract getFitBoundsDetails$(): Observable<FitBoundsDetails>;
}
/**
 * The FitBoundsService is responsible for computing the bounds of the a single map.
 */
export declare class FitBoundsService {
    protected readonly bounds$: Observable<google.maps.LatLngBounds>;
    protected readonly _boundsChangeSampleTime$: BehaviorSubject<number>;
    protected readonly _includeInBounds$: BehaviorSubject<BoundsMap>;
    constructor(loader: MapsAPILoader);
    private _generateBounds;
    addToBounds(latLng: google.maps.LatLng | google.maps.LatLngLiteral): void;
    removeFromBounds(latLng: google.maps.LatLng | google.maps.LatLngLiteral): void;
    changeFitBoundsChangeSampleTime(timeMs: number): void;
    getBounds$(): Observable<google.maps.LatLngBounds>;
    protected _createIdentifier(latLng: google.maps.LatLng | google.maps.LatLngLiteral): string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<FitBoundsService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<FitBoundsService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZml0LWJvdW5kcy5kLnRzIiwic291cmNlcyI6WyJmaXQtYm91bmRzLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiZ29vZ2xlbWFwc1wiIC8+XG5pbXBvcnQgeyBCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE1hcHNBUElMb2FkZXIgfSBmcm9tICcuL21hcHMtYXBpLWxvYWRlci9tYXBzLWFwaS1sb2FkZXInO1xuZXhwb3J0IGludGVyZmFjZSBGaXRCb3VuZHNEZXRhaWxzIHtcbiAgICBsYXRMbmc6IGdvb2dsZS5tYXBzLkxhdExuZyB8IGdvb2dsZS5tYXBzLkxhdExuZ0xpdGVyYWw7XG59XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5leHBvcnQgZGVjbGFyZSB0eXBlIEJvdW5kc01hcCA9IE1hcDxzdHJpbmcsIGdvb2dsZS5tYXBzLkxhdExuZyB8IGdvb2dsZS5tYXBzLkxhdExuZ0xpdGVyYWw+O1xuLyoqXG4gKiBDbGFzcyB0byBpbXBsZW1lbnQgd2hlbiB5b3Ugd2hhdCB0byBiZSBhYmxlIHRvIG1ha2UgaXQgd29yayB3aXRoIHRoZSBhdXRvIGZpdCBib3VuZHMgZmVhdHVyZVxuICogb2YgQUdNLlxuICovXG5leHBvcnQgZGVjbGFyZSBhYnN0cmFjdCBjbGFzcyBGaXRCb3VuZHNBY2Nlc3NvciB7XG4gICAgYWJzdHJhY3QgZ2V0Rml0Qm91bmRzRGV0YWlscyQoKTogT2JzZXJ2YWJsZTxGaXRCb3VuZHNEZXRhaWxzPjtcbn1cbi8qKlxuICogVGhlIEZpdEJvdW5kc1NlcnZpY2UgaXMgcmVzcG9uc2libGUgZm9yIGNvbXB1dGluZyB0aGUgYm91bmRzIG9mIHRoZSBhIHNpbmdsZSBtYXAuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEZpdEJvdW5kc1NlcnZpY2Uge1xuICAgIHByb3RlY3RlZCByZWFkb25seSBib3VuZHMkOiBPYnNlcnZhYmxlPGdvb2dsZS5tYXBzLkxhdExuZ0JvdW5kcz47XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9ib3VuZHNDaGFuZ2VTYW1wbGVUaW1lJDogQmVoYXZpb3JTdWJqZWN0PG51bWJlcj47XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IF9pbmNsdWRlSW5Cb3VuZHMkOiBCZWhhdmlvclN1YmplY3Q8Qm91bmRzTWFwPjtcbiAgICBjb25zdHJ1Y3Rvcihsb2FkZXI6IE1hcHNBUElMb2FkZXIpO1xuICAgIHByaXZhdGUgX2dlbmVyYXRlQm91bmRzO1xuICAgIGFkZFRvQm91bmRzKGxhdExuZzogZ29vZ2xlLm1hcHMuTGF0TG5nIHwgZ29vZ2xlLm1hcHMuTGF0TG5nTGl0ZXJhbCk6IHZvaWQ7XG4gICAgcmVtb3ZlRnJvbUJvdW5kcyhsYXRMbmc6IGdvb2dsZS5tYXBzLkxhdExuZyB8IGdvb2dsZS5tYXBzLkxhdExuZ0xpdGVyYWwpOiB2b2lkO1xuICAgIGNoYW5nZUZpdEJvdW5kc0NoYW5nZVNhbXBsZVRpbWUodGltZU1zOiBudW1iZXIpOiB2b2lkO1xuICAgIGdldEJvdW5kcyQoKTogT2JzZXJ2YWJsZTxnb29nbGUubWFwcy5MYXRMbmdCb3VuZHM+O1xuICAgIHByb3RlY3RlZCBfY3JlYXRlSWRlbnRpZmllcihsYXRMbmc6IGdvb2dsZS5tYXBzLkxhdExuZyB8IGdvb2dsZS5tYXBzLkxhdExuZ0xpdGVyYWwpOiBzdHJpbmc7XG59XG4iXX0=